// C program for different tree traversals
#include <stdio.h>
#include <stdlib.h>
 
/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
	int data;
	struct node* left;
	struct node* right;
};
 
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
struct node* node = (struct node*)
			malloc(sizeof(struct node));
	node->data = data;
	node->left = NULL;
	node->right = NULL;
 
	return(node);
}
 
/* Given a binary tree, print its nodes according to the
  "bottom-up" postorder traversal. */
void printPostorder(struct node* node)
{
	if (node == NULL){
		return;
	}
	// first recur on left subtree
	printPostorder(node->left);
	 
	// then recur on right subtree
	printPostorder(node->right);
	 
	// now deal with the node
	printf("%d ", node->data);
}
 
/* Given a binary tree, print its nodes in inorder*/
void printInorder(struct node* node)
{
	if (node == NULL){
		return;
	}
	/* first recur on left child */
	printInorder(node->left);
	 
	/* then print the data of node */
	printf("%d ", node->data);  
	 
	/* now recur on right child */
	printInorder(node->right);
}
 
/* Given a binary tree, print its nodes in preorder*/
void printPreorder(struct node* node)
{
	if (node == NULL){
		return;
	}
	/* first print data of node */
	printf("%d ", node->data);  
	 
	/* then recur on left sutree */
	printPreorder(node->left);  
	 
	/* now recur on right subtree */
	printPreorder(node->right);
}    
 
/* Driver program to test above functions*/
int main()
{
	string input;
	int j;
	int k;
	int i = 0;
	int size;
	btree Tree; 

	stringstream stream;
	getline(cin,input);
	j = strToInt(input); //get the number of nodes for the tree
	size = (j*3); //multiply it by 3 so array can store data and left and right assignments.
	int arr[size]; //array for stored input
	while(j > 0){
		getline(cin,input);
		stream.str(input);
		k = 0;
		while(stream >> k){
			cout << "k: " << k << " was placed in array at: " << i << "\n";
			arr[i] = k;
			i++;
		}
		stream.clear();//clear any bits set in the stringstream
		stream.str(std::string()); //resets the stream variable
		j--;
	}
	Node *n = new Node();   // create new Node
	n->key = arr[i-2];             // set value     
	arr[i-2] = &n;
	cout << arr[i-2] << "\n";



	struct node *root  = newNode(1);
	root->left             = newNode(2);
	root->right           = newNode(3);
	root->left->left     = newNode(4);
	root->left->right   = newNode(5); 
 
	printf("\nPreorder traversal of binary tree is \n");
	printPreorder(root);
 
	printf("\nInorder traversal of binary tree is \n");
	printInorder(root);  
 
	printf("\nPostorder traversal of binary tree is \n");
	printPostorder(root);
 
	getchar();
	return 0;
}
