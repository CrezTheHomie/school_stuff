#include <algorithm>
#include <iostream>
#include <fstream>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <ctime>

using namespace std;

void linearSearch(int A[], int key){
	cout << "Linear Search: \n";
	for(int i = 0; i < NE; i++){
		if(array[i] == key)	cout << "Yes\n";
		else cout << "No\n";
	}
	
}

void binarySearch(int A[], int key, int imin, int imax){
	// test if array is empty ie search looked through entire array
	if (imax < imin)
		// set is empty, so return no
		cout << "No \n";
	else{
	// calculate midpoint to cut set in half
	int imid = midpoint(imin, imax);
	// three-way comparison
	if (A[imid] > key)
	// key is in lower subset
	return binary_search(A, key, imin, imid - 1);
	else if (A[imid] < key)
	// key is in upper subset
	return binary_search(A, key, imid + 1, imax);
	else{
        // key has been found
        cout << "Yes\n";
    }
	
}

int main(int argc, char *argv[])
{
    
    int NE;  // number of elements
    int NS;  // number of element to search
    int Elements[NE];
    int Searchers[NS];
    int start, finish; // for the clocks
    if (argc != 3)
    {
        printf("<usage>: parameters.\n");
        return 1;
    }
    else
    {
        NE = atoi(argv[1]);
        NS = atoi(argv[2]);
        //printf("Number of elements = %d\nNumber of elements to search = %d\n", NE, NS);
    }

    // Initializing seed for pseudo-random sequence
    srand(time(NULL));

    ofstream inputFile;
    inputFile.open("input.in");
    inputFile << NE << " " << NS << "\n";  //printf("%d %d\n", NE, NS);
    for (int i=1; i <= NE; i++)
    {
        int number;

        number = rand();
        // coin toss
        double r = ((double) rand() / (RAND_MAX));

        if (r < 0.05)           // Introducing neg. numbers with 5% probability
            number = - number;
        inputFile << number << " "; //printf("%d ", number);
	Elements[i] = number;

        if (!(i % 100)) inputFile << "\n"; //if (!(i % 100)) printf("\n");
    }
    inputFile << "\n";
    for (int i=1; i <= NS; i++)
    {
        int number;

        number = rand();
        // coin toss
        double r = ((double) rand() / (RAND_MAX));

        if (r < 0.05)           // Introducing neg. numbers with 5% probability
            number = - number;
        inputFile << number << " ";
	Searchers[i] = number;

        if (!(i % 100)) inputFile << "\n";
    }
	inputFile.close();
	sort(begin(Elements), end(Elements));
	start = clock();
	for(int i = 0; i < NS; i++){
		linearsearch(Elements, Searchers[i]);
	}
	finish = clock();
	cout << "time: " << (finish - start)/double(CLOCKS_PER_SEC)*1000 << endl;

	start = clock();
	cout << "Binary Search: \n";
	for(int i = 0; i < NS; i++){
		binarysearch(Elements, Searchers[i], begin(Elements), end(Elements));
	}
	finish = clock();
	cout << "time: " << (finish - start)/double(CLOCKS_PER_SEC)*1000 << endl;
    return 0;
}



